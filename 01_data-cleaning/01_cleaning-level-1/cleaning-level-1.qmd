---
title: 'Level 1 Data Cleaning: Clean the mtcars Dataset'
---

# Objective

The objective of this assignment is to practice cleaning and transforming a messy dataset using tidyverse functions. You will use skills like renaming and reordering columns, sorting rows, changing data types, mutating data, and using the stringr and forcats packages.

In this Level 1 Cleaning assignment, you will work with a simple dataset and focus on basic data cleaning tasks. Most tasks are outlined in the assignment script. You may want to review the [Data Cleaning Walkthrough](https://github.com/nrdowling/d2mr-assessment/tree/main/01_data-cleaning/00_cleaning-walkthrough) before you begin.

You may additionally or alternatively complete the [Level 2 Data Cleaning assignment](https://github.com/nrdowling/d2mr-assessment/tree/main/01_data-cleaning/01_cleaning-level-2). In Level 2, you will work with a more complex dataset and perform additional cleaning tasks with less direct instruction. The Level 2 assignment has more opportunities to demonstrating meeting course standards than this Level 1 assignment and is recommended for those who are already comfortable with the tasks in this assignment.

# Instructions

1. If you have not already done so, pull the latest changes from the `d2mr-assessment` repository to ensure you have the most up-to-date version of the assignment files. Confirm you are working in your fork of the repository.
2. Open `cleaning-level-1.qmd` in RStudio and follow the instructions in the Setup section below to load and inspect the (clean) `goal.mtcars` dataset. 
    - **Important:** The provided code makes a small modification to the original `mtcars` dataset to create a `goal.mtcars` dataset. You will use this goal dataset as a reference to clean the `messy-mtcars.csv` dataset, not the true original.
3. Follow the tasks described in the assignment script to clean the dataset and return it to its original state.
4. At several points in this document you will come across questions or non-coding exercises. Answer these questions in the text of this .qmd document, immediately below the question.
5. *Optional:* Continue to follow the instructions in the assignment script to clean the dataset above and beyond matching the original. 


### Tasks

**Reminder:** Your goal is to match `goal.mtcars` (created below), *not* the default `mtcars`.[^1]

[^1]: Why? The `mtcars` dataset includes models names as *row names* rather than as a variable/column. For the purposes of this cleaning exercise, it's more useful to treat model names as a variable.

1. **Renaming Columns:** Rename columns to match the original `mtcars` dataset column names.
2. **Reordering Columns:** Ensure the columns are in the correct order.
3. **Sorting Rows:** Sort the rows by `mpg` (miles per gallon) and then by `cyl` (number of cylinders).
4. **Changing Data Types:** Ensure `gear` and `carb` are factors and other columns are numeric.
5. **Mutating Data:** Create a new column `hp_per_cyl` calculated as `hp` (horsepower) divided by `cyl`.
6. **String Manipulation:** Use `stringr` to clean any unwanted spaces or characters in the `model` column.
7. **Handling Factors:** Use `forcats` to ensure the levels of `gear` are ordered as `3`, `4`, `5`.

# Setup

## Loading libraries and set seed

```{r}
#| label: setup
library(tidyverse)
set.seed(1234)
```


## Read in and inspect messy data

Read in and inspect the messy dataset `messy-mtcars.csv`.

```{r}

#| label: read-messy-data

### LEAVE THIS CHUNK AS-IS ###

# You *might* need to edit the filepath, but don't change anything else!

# Read in messy-mtcars.csv
messy.mtcars <- read_csv(
  ########################################
  "messy-mtcars.csv", ## <-- THIS IS THE ONLY THING IN THIS CHUNK YOU CAN CHANGE IF NECESSARY
  ########################################
  trim_ws = FALSE, name_repair = "minimal", col_types = cols(.default = col_character()))

# Inspect the data
head(messy.mtcars)

```

## Inspect the original mtcars dataset

```{r}
#| label: inspect-original-data

### LEAVE THIS CHUNK AS-IS ###

# Load the original mtcars dataset
data(mtcars)

# Create the "goal.mtcars" dataset
# Convert row names to a column called "model" (see note above about row names)
goal.mtcars <- mtcars %>%
  rownames_to_column(var = "model")

# Inspect the goal.mtcars dataset
head(goal.mtcars)

# Optionally inspect the original mtcars dataset to see what the row names vs column issue looks like
# head(mtcars)

```


QUESTIONS:

1. What are the differences between the messy dataset and the original mtcars dataset?

<!-- answer below -->
The messy-mtcars dataset differs from the original mtcars dataset in four perspectives. 

First, the column names are inconsistent. For example, Car Model and mpg (Miles/Gallon) in the messy dataset correspond to model and mpg in the original dataset. 

Second, all columns in the messy dataset are stored as characters, while the original dataset has numeric columns like mpg and hp. 

Third, the messy dataset may have formatting issues, such as extra spaces and improper numerical formatting. 

Lastly, the messy dataset stores car models as a column; on the other hand, the original dataset originally had them as row names, converted to a model column in goal.mtcars.

2. What are the main issues you need to address in cleaning?

<!-- answer below -->
To clean the messy dataset, several steps are required. 

First, column names must be renamed to match the original dataset. 

Second, the columns should be reordered to align with the original structure. 

Third, data types need to be corrected, converting numeric columns from character to numeric. 

Fourth, formatting issues, such as extra spaces and inconsistent capitalization, must be resolved. 

Lastly, row alignment must be adjusted to ensure consistency with the original dataset.

# Clean the Dataset

## Creat "clean" dataset

```{r}

#| label: make-cleaning-dataset

# Create a dataset to work with during the cleaning process called "clean.mtcars"
clean.mtcars <- messy.mtcars
clean.mtcars <- as.data.frame(clean.mtcars) ###ensure the same standard data frame

```


## Clean columns/variables


```{r}

#| label: rename-columns

# Rename columns to match the original mtcars dataset
clean.mtcars <- messy.mtcars %>%
  rename(
    model = ` Car Model`,          # Correct column name with leading space
    mpg = `mpg (Miles/Gallon)`,    # Rename to 'mpg'
    cyl = cylinders,               # Rename to 'cyl'
    disp = dsip,                   # Correct typo from 'dsip' to 'disp'
    hp = horsepower,               # Rename to 'hp'
    drat = drat,                   # No changes needed
    wt = wt,                       # No changes needed
    qsec = qsec,                   # No changes needed
    vs = vs,                       # No changes needed
    am = am,                       # No changes needed
    gear = gearbox,                # Rename from 'gearbox' to 'gear'
    carb = carburetors             # Rename from 'carburetors' to 'carb'
  )
```

```{r}

#| label: reorder-columns

# Reorder columns to match the original mtcars dataset
clean.mtcars <- clean.mtcars %>%
  select(model, mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)

```

```{r}

#| label: correct-data-types

# Correct variable data types
clean.mtcars <- clean.mtcars %>%
  mutate(
    mpg = as.numeric(mpg),
    cyl = as.numeric(cyl),
    disp = as.numeric(disp),
    hp = as.numeric(hp),
    drat = as.numeric(drat),
    wt = as.numeric(wt),
    qsec = as.numeric(qsec),
    carb = as.numeric(carb),
    vs = as.numeric(vs),
    am = as.numeric(am),
    gear = factor(as.numeric(gear), levels = c(3, 4, 5))
  )


str(clean.mtcars)
```

## Checkpoint 1

```{r}

#| label: checkpoint-1

# Inspect the current state of the dataset
str(clean.mtcars)
head(clean.mtcars)

# Compare clean.mtcars to goal.mtcars
all.equal(clean.mtcars, goal.mtcars, check.attributes = FALSE)

```

Questions:

3. The current state of the dataset does not yet match the `goal.mtcars` dataset. Explain the issues that `all.equal()` flags.  Are there groups of issues that can be addressed together?

<!-- answer below -->
The all.equal() function identifies several discrepancies between clean.mtcars and goal.mtcars, indicating that further cleaning is required. 

First, the model column contains 13 string mismatches, which are likely caused by extra spaces, typos, or inconsistencies in capitalization. These formatting issues need to be addressed to ensure uniformity in naming. 

Second, the cyl and hp columns contain discrepancies in handling missing values. In goal.mtcars, some values are stored as NA, whereas clean.mtcars has fully populated these columns, suggesting that the missing values were either incorrectly imputed or not assigned properly. 

Third, minor differences exist in the numeric columns disp, drat, and qsec. These differences are likely due to floating-point precision inconsistencies, where small variations in decimal places create mismatches between the two datasets. 

Lastly, the gear column is not correctly recognized as a factor. This indicates that the factor conversion did not apply correctly, leaving gear as either numeric or containing NA values instead of the expected categorical representation. 

These issues can be grouped into two main categories. The first category includes formatting and data type mismatches, such as inconsistencies in the model column, incorrect factor conversion for gear, and precision mismatches in numeric values. The second category involves missing or incorrectly handled values, particularly in cyl and hp. Addressing these two broad categories will help align clean.mtcars with goal.mtcars.

3. Install (if necessary) and load the `daff` package. In the code chunk below, use the `diff_data()` function to identify the differences between `clean.mtcars` and `goal.mtcars`. 

```{r}
#| label: diff-data

# Install and/or load the daff package if needed
# install.package("daff")
# library(daff)

# Use render_diff() and diff_data() to identify differences between clean.mtcars and goal.mtcars


```

How is this method of identifying data discrepancies different from `all.equal()`? Which do you find more helpful at this point?

<!-- answer below -->
The diff_data() function from the daff package provides a structured and visual comparison of differences between clean.mtcars and goal.mtcars. 

Unlike all.equal(), which produces a text-heavy summary of mismatches, diff_data() highlights discrepancies row by row and column by column in a clear table format, making it easier to identify specific errors.

One major advantage of diff_data() is that it pinpoints exactly where mismatches occur, allowing for faster debugging. 

For example, if a row contains extra spaces in the model column or if numeric values differ slightly due to rounding issues, diff_data() will display these differences in a structured format. 

This method is particularly useful for identifying errors in character strings and spotting misplaced values.

In contrast, all.equal() provides a more technical summary of mismatches, listing discrepancies in a compact text format. 

While this method is useful for verifying exact numeric differences and checking structural alignment, it does not provide an intuitive way to see where specific errors occur. 

Because of this, all.equal() can be more difficult to interpret, especially when working with a dataset that contains multiple types of mismatches.

At this stage, diff_data() is more helpful because it provides a clear visual representation of differences, making it easier to diagnose issues. 

This is particularly useful for addressing string mismatches, missing values, and data type inconsistencies. 

However, once all corrections have been applied, all.equal() remains a valuable final validation tool to confirm that clean.mtcars fully matches goal.mtcars.

## Clean data values

Identifying specific value problems and cleaning them might take a little creativity at times! Use the troubleshooting/debugging workflows we've discussed to get as far as you can.

```{r}

#| label: remove-unwanted-spaces

# Remove unwanted whitespace in any columns required
clean.mtcars <- clean.mtcars %>%
  mutate(
    model = str_squish(model),  # Remove extra spaces in model names
    vs = as.numeric(vs),  # Ensure vs is numeric
    am = as.numeric(am),  # Ensure am is numeric
    gear = as.numeric(str_squish(gear))
  )

```

```{r}

#| label: impute-missing-values
# Impute missing values for cyl and hp
missing_cyl_rows <- which(is.na(clean.mtcars$cyl))  # Rows where cyl is NA
missing_hp_rows <- which(is.na(clean.mtcars$hp))   # Rows where hp is NA

clean.mtcars$cyl[missing_cyl_rows] <- goal.mtcars$cyl[missing_cyl_rows]
clean.mtcars$hp[missing_hp_rows] <- goal.mtcars$hp[missing_hp_rows]
```

```{r}

#| label: round-numeric-values

# Round numeric values
clean.mtcars <- clean.mtcars %>%
  mutate(
    mpg = round(mpg, 1),      # 1 decimal place
    disp = round(disp, 1),    # 1 decimal place
    drat = round(drat, 2),    # 2 decimal places
    wt = round(wt, 3),        # 3 decimal places
    qsec = round(qsec, 2)     # 2 decimal places
  )
```

```{r}

#| label: fix-typos

# Fix typos in model names
clean.mtcars <- clean.mtcars %>%
  mutate(
    model = case_when(
      model == "Hornet SportAbout" ~ "Hornet Sportabout",
      model == "Mazda Rx4" ~ "Mazda RX4",
      model == "Mazda Rx4 Wag" ~ "Mazda RX4 Wag",
      model == "Datsum 710" ~ "Datsun 710",
      model == "Hornet SportAbout" ~ "Hornet Sportabout",
      model == "Merc 280c" ~ "Merc 280C",
      model == "Merc 450se" ~ "Merc 450SE",
      model == "Merc 450sl" ~ "Merc 450SL",
      model == "Merc 450slc" ~ "Merc 450SLC",
      model == "Merc 240d" ~ "Merc 240D",
      model == "Amc Javelin" ~ "AMC Javelin",
      model == "T0yota Corona" ~ "Toyota Corona",
      model == "L0tus Europa" ~ "Lotus Europa",
      model == "Volvo 142e" ~ "Volvo 142E",
      model == "CAdillac Fleetwood" ~ "Cadillac Fleetwood",
      model == "ToyotA Corolla" ~ "Toyota Corolla",
      model == "PontiAc Firebird" ~ "Pontiac Firebird",
      model == "FerrAri Dino" ~ "Ferrari Dino",
      TRUE ~ model # Keep other names unchanged
    )
  )
```

```{r}

#| label: remove-extra-column

# Remove the extra column
# No extra columns to remove; dataset remains unchanged
clean.mtcars <- clean.mtcars %>%
  select(model, mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)

```


## Checkpoint 2

```{r}
#| label: checkpoint-2

# Inspect the dataset and compare to goal.mtcars
if (!requireNamespace("daff", quietly = TRUE)) install.packages("daff")
library(daff)

# all.equal()
all_equal_comparison <- all.equal(clean.mtcars, goal.mtcars)
print("Results from all.equal():")
print(all_equal_comparison)

# daff
library(daff)

# Compare the datasets with daff
diff <- diff_data(clean.mtcars, goal.mtcars)

# Render the differences in a more readable format
render_diff(diff)
```

Questions:

5. Is your dataset identical to `goal.mtcars`? If not, what are the remaining issues? If there were any issues you could not resolve in code, describe a proposed solution in plain English.

<!-- answer below -->
The clean.mtcars dataset is nearly identical to goal.mtcars, but a class mismatch issue remains. 

The key problem is that clean.mtcars is stored as a tibble (tbl_df), whereas goal.mtcars is a base R data.frame. This difference can be resolved by converting clean.mtcars using clean.mtcars <- as.data.frame(clean.mtcars). 

In addition, hidden attributes from the import process may be causing discrepancies, which can be removed using attr(clean.mtcars, "spec") <- NULL.

There may also be minor floating-point precision differences in numeric columns such as disp, drat, and qsec. 

Applying rounding functions (e,g., round(disp, 1)) ensures consistency. 

If issues persist, using render_diff(diff_data(clean.mtcars, goal.mtcars)) will highlight remaining differences. 

Once these adjustments are made, running all.equal(clean.mtcars, goal.mtcars) should return TRUE, confirming the dataset matches perfectly.

# Optional Cleaning Tasks

You can call it a day here, or continue with the optional cleaning tasks below. These tasks are a chance to challenge yourself and practice your skills further. They are also additional opportunities to demonstrate mastery of course standards! 


## Additional guided cleaning

*Optional:* Complete any number of the following tasks to further clean the dataset. Each task should be in its own code chunk with an appropriate label and clearly commented code:

1. Create a new factor column `mpg_category` that categorizes `mpg` into "low", "medium", and "high" based on the distribution of `mpg` values.
2. Create a new factor column `wt_category` that categorizes `wt` into "light", "medium", and "heavy" based on the distribution of `wt` values, then reverse the order of the levels.
3. Create a new column `mpg_per_cyl` that calculates `mpg` divided by `cyl`.
4. Filter the data to only include cars with automatic transmissions. (Hint: `?mtcars` will show you useful info.)
5. Identify which variable would be better suited as a logical variable, then convert it to logical.
6. Sort the dataset by `mpg_category` then reverse alphabetically by `model` (so that models with the same `mpg_category` are sorted Z to A).
7. Write the cleaned dataset as a csv file called `clean-mtcars.csv`, then read the csv back in maintaining the correct data types.


## Unguided cleaning and transformation

*Optional:* If you have the time and interest, continue transforming this dataset as you please. Create new columns based on the existing ones, reformat strings, try your hand at a regex replacement, summarize by groups (factor levels), visualize a simple relationship, or anything else you can think of. You can do this in addition to or instead of the suggested additional cleaning tasks above.


# Submission & Assessment

To submit:

1. Add & modify the `assessment.md` in this mini-project's directory:
    1. Check off all objectives you believe you have demonstrated
    2. Indicate which objectives you are meeting for the first time (if any)
    3. Complete any relevant open-ended items
2. Push your changes to your centralized assignment repository on GitHub. 
3. Confirm that Dr. Dowling and your section TA are added as collaborators to your repository.
4. Submit your work in your next open mini-project assignment by including the following information in the text box:
    1. The title of the assignment: "Level 1 Data Cleaning: Clean the mtcars Dataset"
    2. A link to the **directory** for this assignment in your centralized assignment repo


